ProfilePage: 'use client'


import { useState, useEffect } from 'react'
import { useRouter } from 'next/navigation'
import { useAuth } from '@/contexts/AuthContext'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { Switch } from '@/components/ui/switch'
import { createClient } from '../../../lib/supabase/client'
import { useAlert } from '../../../lib/store/alert'
import Header from '@/components/Header'
import MainNavigation from '@/components/MainNavigation'
import {
  User,
  Mail,
  Phone,
  Building,
  Calendar,
  Save,
  Lock,
  Settings,
  Bell,
  Shield,
  AlertCircle,
  CheckCircle
} from 'lucide-react'
import { Loading } from '@/components/ui/Loading'


interface UserProfile {
  id: string
  email: string
  role: 'admin' | 'user'
  created_at: string
  updated_at: string
  full_name?: string
  phone?: string
  company?: string
  notifications_enabled?: boolean
}


export default function ProfilePage() {
  const { user, loading: authLoading } = useAuth()
  const { setAlert } = useAlert()
  const router = useRouter()
  const supabase = createClient()


  const [profile, setProfile] = useState<UserProfile | null>(null)
  const [profileLoading, setProfileLoading] = useState(true)
  const [saving, setSaving] = useState(false)
  const [showPasswordForm, setShowPasswordForm] = useState(false)
  const [passwordData, setPasswordData] = useState({
    newPassword: '',
    confirmPassword: ''
  })


  useEffect(() => {
    if (authLoading) return


    if (!user) {
      router.push('/auth/login')
      setProfileLoading(false)
      return
    }


    fetchProfile()
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [user, authLoading])


  const fetchProfile = async () => {
    if (!user) return
    setProfileLoading(true)
    try {
      const { data, error } = await supabase
        .from('profiles')
        .select('*')
        .eq('id', user.id)
        .single()


      if (error) {
        if ((error as any).code === 'PGRST116') {
          await createProfile()
        } else {
          console.error('Error fetching profile:', error)
          setAlert('Neizdevās ielādēt profilu', 'error')
        }
      } else {
        const profileWithMetadata = {
          ...data,
          full_name:
            data.full_name ||
            (user.user_metadata?.full_name as string) ||
            (user.user_metadata?.name as string) ||
            ''
        }
        setProfile(profileWithMetadata)
      }
    } catch (err) {
      console.error('Profile fetch failed:', err)
      setAlert('Neizdevās ielādēt profilu', 'error')
    } finally {
      setProfileLoading(false)
    }
  }


  const createProfile = async () => {
    if (!user) {
      setAlert('Lietotājs nav atrasts', 'error')
      return
    }


    try {
      const displayName =
        (user.user_metadata?.full_name as string) ||
        (user.user_metadata?.name as string) ||
        (user.user_metadata?.display_name as string) ||
        ''


      const newProfile = {
        id: user.id,
        email: user.email || '',
        role: 'user' as const,
        full_name: displayName,
        phone: (user.user_metadata?.phone as string) || '',
        company: '',
        notifications_enabled: true,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      }


      const { data, error } = await supabase
        .from('profiles')
        .insert([newProfile])
        .select()
        .single()


      if (error) throw error


      setProfile(data)
      setAlert('Profils izveidots', 'success')
    } catch (error) {
      console.error('Error creating profile:', error)
      setAlert('Neizdevās izveidot profilu', 'error')
    }
  }


    const handleProfileUpdate = async (e: React.FormEvent) => {
      e.preventDefault()
      if (!profile || !user) return
      if (!profile.full_name) {
        setAlert('Lūdzu, ievadiet savu pilno vārdu', 'error')
        return
      }
      if (profile.full_name.length < 3) {
        setAlert('Pilnam vārdam jābūt vismaz 3 simbolus garam', 'error')
        return
      }
      setSaving(true)
      try {
        const updateData = {
          full_name: profile.full_name || '',
          phone: profile.phone || '',
          company: profile.company || '',
          notifications_enabled: profile.notifications_enabled ?? true,
          updated_at: new Date().toISOString()
        }


        const { data, error } = await supabase
          .from('profiles')
          .update(updateData)
          .eq('id', user.id)
          .select()


        if (error) throw error


        if (data && data.length > 0) {
          setProfile(data[0])
          setAlert('Profils atjaunināts veiksmīgi', 'success')
        } else {
          setAlert('Neizdevās atjaunināt profilu', 'error')
        }


        if (profile.full_name && profile.full_name !== (user.user_metadata?.full_name as string)) {
          const { error: authErr } = await supabase.auth.updateUser({
            data: {
              full_name: profile.full_name,
              name: profile.full_name
            }
          })
          if (authErr) {
            console.warn('Auth metadata update failed:', authErr)
          }
        }


        } catch (error) {
          console.error('Detailed error:', error)
          const errorMessage = error instanceof Error ? error.message : 'Nezināma kļūda'
          setAlert(`Kļūda: ${errorMessage}`, 'error')
        } finally {
          setSaving(false)
        }
    }


  const handlePasswordChange = async (e: React.FormEvent) => {
    e.preventDefault()


    if (passwordData.newPassword !== passwordData.confirmPassword) {
      setAlert('Jaunās paroles nesakrīt', 'error')
      return
    }


    if (passwordData.newPassword.length < 6) {
      setAlert('Parolei jābūt vismaz 6 simboli garai', 'error')
      return
    }


    setSaving(true)
    try {
      const { error } = await supabase.auth.updateUser({
        password: passwordData.newPassword
      })


      if (error) throw error


      setAlert('Parole nomainīta veiksmīgi', 'success')
      setPasswordData({ newPassword: '', confirmPassword: '' })
      setShowPasswordForm(false)
    } catch (error) {
      console.error('Error changing password:', error)
      setAlert('Neizdevās nomainīt paroli', 'error')
    } finally {
      setSaving(false)
    }
  }


  if (authLoading || profileLoading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-gray-50 to-gray-100">
        <Header />
        <MainNavigation />
        <Loading variant="spinner" text="Ielādē profilu..." className="py-20" />
      </div>
    )
  }


  if (!user) return null


  if (!profile) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-gray-50 to-gray-100">
        <Header />
        <MainNavigation />
        <div className="flex items-center justify-center py-20">
          <div className="bg-white rounded-2xl shadow-xl p-8 text-center max-w-md">
            <AlertCircle className="w-16 h-16 text-red-500 mx-auto mb-4" />
            <h1 className="text-2xl font-bold text-gray-900 mb-2">Profils nav atrasts</h1>
            <p className="text-gray-600 mb-6">Neizdevās ielādēt jūsu profila informāciju.</p>
            <Button onClick={() => window.location.reload()}>
              Mēģināt vēlreiz
            </Button>
          </div>
        </div>
      </div>
    )
  }


  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-50 to-gray-100">
      <Header />
      <MainNavigation />


      <div className="max-w-6xl mx-auto px-4 py-8">
        <div className="bg-gradient-to-r from-red-500 to-pink-600 rounded-2xl p-8 text-white shadow-xl mb-8">
          <div className="flex items-center space-x-6">
            <div className="w-20 h-20 bg-white/20 backdrop-blur-sm rounded-full flex items-center justify-center">
              <User className="w-10 h-10 text-white" />
            </div>
            <div>
              <h1 className="text-3xl font-bold mb-2">
                {profile.full_name || 'Lietotājs'}
              </h1>
              <p className="text-red-100 text-lg">{profile.email}</p>
              <p className="text-red-200 text-sm">
                Reģistrēts {new Date(profile.created_at).toLocaleDateString('lv-LV')}
              </p>
            </div>
          </div>
        </div>


        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          <div className="lg:col-span-2 space-y-6">
            <div className="bg-white rounded-xl p-6 shadow-lg border border-gray-100">
              <div className="flex items-center mb-6">
                <Settings className="w-5 h-5 text-red-600 mr-2" />
                <h2 className="text-xl font-semibold text-gray-900">Profila informācija</h2>
              </div>


              <form onSubmit={handleProfileUpdate} className="space-y-4">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div className="space-y-2">
                    <Label htmlFor="full_name" className="text-sm font-medium text-gray-700">
                      Pilns vārds
                    </Label>
                    <div className="relative">
                      <User className="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400" />
                      <Input
                        id="full_name"
                        value={profile.full_name || ''}
                        onChange={(e) =>
                          setProfile(prev => (prev ? { ...prev, full_name: e.target.value } : prev))
                        }
                        placeholder="Jūsu pilns vārds"
                        className="pl-10"
                      />
                    </div>
                  </div>


                  <div className="space-y-2">
                    <Label htmlFor="phone" className="text-sm font-medium text-gray-700">
                      Telefona numurs
                    </Label>
                    <div className="relative">
                      <Phone className="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400" />
                      <Input
                        id="phone"
                        value={profile.phone || ''}
                        onChange={(e) =>
                          setProfile(prev => (prev ? { ...prev, phone: e.target.value } : prev))
                        }
                        placeholder="+371 20000000"
                        className="pl-10"
                      />
                    </div>
                  </div>
                </div>


                <div className="space-y-2">
                  <Label htmlFor="email" className="text-sm font-medium text-gray-700">
                    E-pasta adrese
                  </Label>
                  <div className="relative">
                    <Mail className="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400" />
                    <Input
                      id="email"
                      value={profile.email}
                      disabled
                      className="pl-10 bg-gray-50 text-gray-500"
                    />
                  </div>
                  <p className="text-xs text-gray-500">E-pastu nevar mainīt</p>
                </div>


                <div className="space-y-2">
                  <Label htmlFor="company" className="text-sm font-medium text-gray-700">
                    Uzņēmums (neobligāti)
                  </Label>
                  <div className="relative">
                    <Building className="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400" />
                    <Input
                      id="company"
                      value={profile.company || ''}
                      onChange={(e) =>
                        setProfile(prev => (prev ? { ...prev, company: e.target.value } : prev))
                      }
                      placeholder="Jūsu uzņēmuma nosaukums"
                      className="pl-10"
                    />
                  </div>
                </div>


                <Button
                  type="submit"
                  disabled={saving}
                  className="w-full bg-gradient-to-r from-red-500 to-pink-600 hover:from-red-600 hover:to-pink-700"
                >
                  {saving ? (
                    <>
                      <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin mr-2"></div>
                      Saglabā...
                    </>
                  ) : (
                    <>
                      <Save className="w-4 h-4 mr-2" />
                      Saglabāt izmaiņas
                    </>
                  )}
                </Button>
              </form>
            </div>


            <div className="bg-white rounded-xl p-6 shadow-lg border border-gray-100">
              <div className="flex items-center mb-6">
                <Lock className="w-5 h-5 text-orange-600 mr-2" />
                <h2 className="text-xl font-semibold text-gray-900">Paroles maiņa</h2>
              </div>


              {!showPasswordForm ? (
                <div className="space-y-4">
                  <div className="p-4 bg-orange-50 border border-orange-200 rounded-lg">
                    <div className="flex items-center space-x-2">
                      <Shield className="w-5 h-5 text-orange-600" />
                      <div>
                        <h3 className="font-medium text-orange-800">Jūsu konta drošība</h3>
                        <p className="text-sm text-orange-700">
                          Regulāri mainiet paroli, lai aizsargātu savu kontu
                        </p>
                      </div>
                    </div>
                  </div>
                  <Button
                    variant="outline"
                    onClick={() => setShowPasswordForm(true)}
                    className="w-full"
                  >
                    <Lock className="w-4 h-4 mr-2" />
                    Mainīt paroli
                  </Button>
                </div>
              ) : (
                <form onSubmit={handlePasswordChange} className="space-y-4">
                  <div className="space-y-2">
                    <Label htmlFor="new_password" className="text-sm font-medium text-gray-700">
                      Jaunā parole
                    </Label>
                    <Input
                      id="new_password"
                      type="password"
                      value={passwordData.newPassword}
                      onChange={(e) =>
                        setPasswordData(prev => ({ ...prev, newPassword: e.target.value }))
                      }
                      placeholder="Ievadiet jauno paroli"
                      className="w-full"
                      required
                    />
                  </div>


                  <div className="space-y-2">
                    <Label htmlFor="confirm_password" className="text-sm font-medium text-gray-700">
                      Apstiprināt paroli
                    </Label>
                    <Input
                      id="confirm_password"
                      type="password"
                      value={passwordData.confirmPassword}
                      onChange={(e) =>
                        setPasswordData(prev => ({ ...prev, confirmPassword: e.target.value }))
                      }
                      placeholder="Ievadiet paroli vēlreiz"
                      className="w-full"
                      required
                    />
                  </div>


                  <div className="flex gap-3">
                    <Button
                      type="submit"
                      disabled={saving}
                      className="flex-1 bg-orange-600 hover:bg-orange-700"
                    >
                      {saving ? (
                        <>
                          <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin mr-2"></div>
                          Maina...
                        </>
                      ) : (
                        <>
                          <Save className="w-4 h-4 mr-2" />
                          Saglabāt
                        </>
                      )}
                    </Button>
                    <Button
                      type="button"
                      variant="outline"
                      onClick={() => {
                        setShowPasswordForm(false)
                        setPasswordData({ newPassword: '', confirmPassword: '' })
                      }}
                      disabled={saving}
                    >
                      Atcelt
                    </Button>
                  </div>
                </form>
              )}
            </div>
          </div>


          <div className="space-y-6">
            <div className="bg-white rounded-xl p-6 shadow-lg border border-gray-100">
              <div className="flex items-center mb-4">
                <CheckCircle className="w-5 h-5 text-green-600 mr-2" />
                <h3 className="text-lg font-semibold text-gray-900">Konta statuss</h3>
              </div>
              <div className="space-y-3">
                <div className="flex items-center justify-between">
                  <span className="text-sm text-gray-600">E-pasts apstiprināts</span>
                  <CheckCircle className="w-4 h-4 text-green-500" />
                </div>
                <div className="flex items-center justify-between">
                  <span className="text-sm text-gray-600">Profils aktivizēts</span>
                  <CheckCircle className="w-4 h-4 text-green-500" />
                </div>
              </div>
            </div>


            <div className="bg-white rounded-xl p-6 shadow-lg border border-gray-100">
              <div className="flex items-center mb-4">
                <Bell className="w-5 h-5 text-blue-600 mr-2" />
                <h3 className="text-lg font-semibold text-gray-900">Paziņojumi</h3>
              </div>
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-gray-900">E-pasta paziņojumi</p>
                  <p className="text-xs text-gray-500">Saņemt informāciju par pasūtījumiem</p>
                </div>
                <Switch
                  checked={profile.notifications_enabled ?? true}
                  onCheckedChange={async (checked) => {
                    setProfile(prev => (prev ? { ...prev, notifications_enabled: checked } : prev))
                    if (!user) return
                    try {
                      const { error } = await supabase
                        .from('profiles')
                        .update({
                          notifications_enabled: checked,
                          updated_at: new Date().toISOString()
                        })
                        .eq('id', user.id)
                      if (error) throw error
                      setAlert('Paziņojumu iestatījumi saglabāti', 'success')
                    } catch (e) {
                      setProfile(prev => (prev ? { ...prev, notifications_enabled: !checked } : prev))
                      setAlert('Neizdevās saglabāt paziņojumu iestatījumus', 'error')
                    }
                  }}
                />
              </div>
            </div>


            <div className="bg-white rounded-xl p-6 shadow-lg border border-gray-100">
              <div className="flex items-center mb-4">
                <Calendar className="w-5 h-5 text-purple-600 mr-2" />
                <h3 className="text-lg font-semibold text-gray-900">Konta informācija</h3>
              </div>
              <div className="space-y-3 text-sm">
                <div>
                  <span className="text-gray-600">Reģistrācijas datums:</span>
                  <p className="font-medium text-gray-900">
                    {new Date(profile.created_at).toLocaleDateString('lv-LV', {
                      year: 'numeric',
                      month: 'long',
                      day: 'numeric'
                    })}
                  </p>
                </div>
                <div>
                  <span className="text-gray-600">Pēdējās izmaiņas:</span>
                  <p className="font-medium text-gray-900">
                    {new Date(profile.updated_at).toLocaleDateString('lv-LV', {
                      year: 'numeric',
                      month: 'long',
                      day: 'numeric'
                    })}
                  </p>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  )
} / RegisterPage: 'use client'


import { useRef, useState } from 'react'
import { useLoading } from '@hooks/useLoading'
import { useRouter } from 'next/navigation'
import Link from 'next/link'
import { Button } from '@/components/ui/button'
import { useAuth } from '@/contexts/AuthContext'
import { Eye, EyeOff, UserPlus, Mail, Lock } from 'lucide-react'
import { Loading } from '@/components/ui/Loading'
import HCaptcha from '@hcaptcha/react-hcaptcha'


export default function RegisterPage() {
  const [email, setEmail] = useState('')
  const [password, setPassword] = useState('')
  const [confirmPassword, setConfirmPassword] = useState('')
  const [personType, setPersonType] = useState<'private' | 'company'>('private')
  const [showPassword, setShowPassword] = useState(false)
  const [showConfirmPassword, setShowConfirmPassword] = useState(false)


  // Svarīgi: sākam ar false, lai nebūtu "mūžīgās ielādes"
  const { isLoading, withLoading } = useLoading(false)


  const [socialLoading, setSocialLoading] = useState<string | null>(null)
  const [passwordError, setPasswordError] = useState('')
  const [captchaToken, setCaptchaToken] = useState<string | null>(null)
  const captchaRef = useRef<HCaptcha | null>(null)


  // PIEZĪME: signUp jāatbalsta captchaToken trešais parametrs AuthContext iekšā
  const { signUp, signInWithGoogle, signInWithFacebook, error } = useAuth()
  const router = useRouter()


  const HCAPTCHA_SITE_KEY = process.env.NEXT_PUBLIC_HCAPTCHA_SITE_KEY || ''


  const validatePassword = (pwd: string) => {
    if (pwd.length < 6) {
      return 'Parolei jābūt vismaz 6 simboli garai'
    }
    return ''
  }


  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    setPasswordError('')


    const passwordValidation = validatePassword(password)
    if (passwordValidation) {
      setPasswordError(passwordValidation)
      return
    }


    if (password !== confirmPassword) {
      setPasswordError('Paroles nesakrīt')
      return
    }


    if (!captchaToken) {
      setPasswordError('Lūdzu, apstipriniet hCaptcha izaicinājumu')
      return
    }


    const { error: signUpError } = await withLoading(() => signUp(email, password, captchaToken, personType))


    try {
      captchaRef.current?.resetCaptcha()
      setCaptchaToken(null)
    } catch {
    }


    if (!signUpError) {
      router.replace('/auth/verify-email')
    }
  }


  const handleGoogleSignIn = async () => {
    if (isLoading || socialLoading) return
    setSocialLoading('google')
    try {
      await signInWithGoogle()
    } catch (e) {
      console.error('Google sign-in failed:', e)
    } finally {
      setSocialLoading(null)
    }
  }


  const handleFacebookSignIn = async () => {
    if (isLoading || socialLoading) return
    setSocialLoading('facebook')
    try {
      await signInWithFacebook()
      // router.replace('/auth/verify-email') // ja nav redirect plūsmas
    } catch (e) {
      console.error('Facebook sign-in failed:', e)
    } finally {
      setSocialLoading(null)
    }
  }


  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-50 to-gray-100 flex items-center justify-center p-4">
      <div className="bg-white rounded-2xl shadow-xl w-full max-w-md p-8">
        <div className="text-center mb-8">
          <div className="inline-flex items-center justify-center w-16 h-16 bg-green-100 rounded-full mb-4">
            <UserPlus className="w-8 h-8 text-green-600" />
          </div>
          <h1 className="text-2xl font-bold text-gray-900 mb-2">Reģistrēties</h1>
          <p className="text-gray-600">Izveidojiet jaunu kontu</p>
        </div>


        <div className="space-y-3 mb-6">
          <Button
            type="button"
            variant="outline"
            onClick={handleGoogleSignIn}
            disabled={socialLoading === 'google' || isLoading}
            className="w-full relative"
          >
            {socialLoading === 'google' ? (
              <div className="w-4 h-4 border-2 border-gray-400 border-t-transparent rounded-full animate-spin mr-2" />
            ) : (
              <svg className="w-4 h-4 mr-2" viewBox="0 0 24 24" aria-hidden="true">
                <path fill="#4285F4" d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z" />
                <path fill="#34A853" d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z" />
                <path fill="#FBBC05" d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z" />
                <path fill="#EA4335" d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z" />
              </svg>
            )}
            Turpināt ar Google
          </Button>


          <Button
            type="button"
            variant="outline"
            onClick={handleFacebookSignIn}
            disabled={socialLoading === 'facebook' || isLoading}
            className="w-full relative"
          >
            {socialLoading === 'facebook' ? (
              <div className="w-4 h-4 border-2 border-gray-400 border-t-transparent rounded-full animate-spin mr-2" />
            ) : (
              <svg className="w-4 h-4 mr-2" fill="#1877F2" viewBox="0 0 24 24" aria-hidden="true">
                <path d="M24 12.073c0-6.627-5.373-12-12-12s-12 5.373-12 12c0 5.99 4.388 10.954 10.125 11.854v-8.385H7.078v-3.47h3.047V9.43c0-3.007 1.792-4.669 4.533-4.669 1.312 0 2.686.235 2.686.235v2.953H15.83c-1.491 0-1.956.925-1.956 1.874v2.25h3.328l-.532 3.47h-2.796v8.385C19.612 23.027 24 18.062 24 12.073z" />
              </svg>
            )}
            Turpināt ar Facebook
          </Button>


          <div className="relative">
            <div className="absolute inset-0 flex items-center">
              <span className="w-full border-t border-gray-300" />
            </div>
            <div className="relative flex justify-center text-xs uppercase">
              <span className="bg-white px-2 text-gray-500">vai</span>
            </div>
          </div>
        </div>


        <form onSubmit={handleSubmit} className="space-y-6">
          <div className="space-y-4">
            <div>
              <label htmlFor="email" className="block text-sm font-medium text-gray-700 mb-2">
                E-pasta adrese
              </label>
              <div className="relative">
                <Mail className="absolute left-3 top-1/2 -translate-y-1/2 w-5 h-5 text-gray-400" />
                <input
                  id="email"
                  type="email"
                  value={email}
                  onChange={(e) => setEmail(e.target.value)}
                  className="w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent transition-all"
                  placeholder="jusu@epasts.lv"
                  required
                />
              </div>
            </div>


            <div>
              <label htmlFor="personType" className="block text-sm font-medium text-gray-700 mb-2">
                Profila tips
              </label>
              <select
                id="personType"
                value={personType}
                onChange={(e) => setPersonType(e.target.value as 'private' | 'company')}
                className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent transition-all"
              >
                <option value="private">Privātpersona</option>
                <option value="company">Juridiska persona</option>
              </select>
            </div>


            <div>
              <label htmlFor="password" className="block text-sm font-medium text-gray-700 mb-2">
                Parole
              </label>
              <div className="relative">
                <Lock className="absolute left-3 top-1/2 -translate-y-1/2 w-5 h-5 text-gray-400" />
                <input
                  id="password"
                  type={showPassword ? 'text' : 'password'}
                  value={password}
                  onChange={(e) => setPassword(e.target.value)}
                  className="w-full pl-10 pr-12 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent transition-all"
                  placeholder="••••••••"
                  required
                />
                <button
                  type="button"
                  onClick={() => setShowPassword(!showPassword)}
                  className="absolute right-3 top-1/2 -translate-y-1/2 text-gray-400 hover:text-gray-600"
                  aria-label={showPassword ? 'Slēpt paroli' : 'Rādīt paroli'}
                >
                  {showPassword ? <EyeOff className="w-5 h-5" /> : <Eye className="w-5 h-5" />}
                </button>
              </div>
              <p className="text-xs text-gray-500 mt-1">Vismaz 6 simboli</p>
            </div>


            <div>
              <label htmlFor="confirmPassword" className="block text-sm font-medium text-gray-700 mb-2">
                Apstiprināt paroli
              </label>
              <div className="relative">
                <Lock className="absolute left-3 top-1/2 -translate-y-1/2 w-5 h-5 text-gray-400" />
                <input
                  id="confirmPassword"
                  type={showConfirmPassword ? 'text' : 'password'}
                  value={confirmPassword}
                  onChange={(e) => setConfirmPassword(e.target.value)}
                  className="w-full pl-10 pr-12 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent transition-all"
                  placeholder="••••••••"
                  required
                />
                <button
                  type="button"
                  onClick={() => setShowConfirmPassword(!showConfirmPassword)}
                  className="absolute right-3 top-1/2 -translate-y-1/2 text-gray-400 hover:text-gray-600"
                  aria-label={showConfirmPassword ? 'Slēpt paroli' : 'Rādīt paroli'}
                >
                  {showConfirmPassword ? <EyeOff className="w-5 h-5" /> : <Eye className="w-5 h-5" />}
                </button>
              </div>
            </div>


            {/* hCaptcha widgets */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Drošības apstiprinājums
              </label>
              <HCaptcha
                ref={captchaRef as any}
                sitekey={HCAPTCHA_SITE_KEY}
                onVerify={(token) => setCaptchaToken(token)}
                onExpire={() => setCaptchaToken(null)}
                onError={() => setCaptchaToken(null)}
                theme="light"
              />
              <p className="text-xs text-gray-500 mt-2">
                Lūdzu, izpildiet hCaptcha, lai turpinātu reģistrāciju.
              </p>
            </div>
          </div>


          {(error || passwordError) && (
            <div className="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-lg text-sm">
              {error || passwordError}
            </div>
          )}


            <Button
              type="submit"
              disabled={isLoading || socialLoading !== null}
              className="w-full bg-green-600 hover:bg-green-700 text-white py-3 text-base font-medium"
            >
              Reģistrēties
            </Button>


            {isLoading && (
              <div className="flex justify-center">
                <Loading size="sm" variant="spinner" text="Reģistrējam profilu..." />
              </div>
            )}
            <div className="text-center text-sm text-gray-500 mt-4">
              Reģistrējoties, jūs piekrītat mūsu{' '}
              <Link href="/terms" className="text-green-600 hover:text-green-700 font-medium transition-colors">
                Lietošanas noteikumiem
              </Link>{' '}
              un{' '}
              <Link href="/privacy" className="text-green-600 hover:text-green-700 font-medium transition-colors">
                Privātuma politikai
              </Link>.
            </div>


          <div className="text-center">
            <div className="text-sm text-gray-600">
              Jau ir konts?{' '}
              <Link href="/auth/login" className="text-green-600 hover:text-green-700 font-medium transition-colors">
                Pierakstīties
              </Link>
            </div>
          </div>
        </form>
      </div>
    </div>
  )
} / AuthContext: 'use client'


import { createContext, useContext, useEffect, useState } from 'react'
import { createClient } from '../../lib/supabase/client'
import { AuthState } from '@/types/auth'


interface AuthContextType extends AuthState {
  signIn(email: string, password: string, captchaToken?: string): Promise<{ error: string | null }>
  signUp: (email: string, password: string, captchaToken?: string, personType?: 'private' | 'company') => Promise<{ error: string | null }>
  signOut: () => Promise<void>
  resetPassword: (email: string) => Promise<{ error: string | null }>
  signInWithGoogle: () => Promise<{ error: string | null }>
  signInWithFacebook: () => Promise<{ error: string | null }>
}


const AuthContext = createContext<AuthContextType | undefined>(undefined)


export function AuthProvider({ children }: { children: React.ReactNode }) {
  const [state, setState] = useState<AuthState>({
    user: null,
    loading: true,
    error: null
  })


  const supabase = createClient()


  useEffect(() => {
    const getInitialSession = async () => {
      try {
        const {
          data: { session },
          error
        } = await supabase.auth.getSession()


        if (error) {
          setState(prev => ({ ...prev, error: error.message, loading: false }))
          return
        }


        setState(prev => ({
          ...prev,
          user: session?.user ?? null,
          loading: false,
          error: null
        }))
      } catch {
        setState(prev => ({
          ...prev,
          error: 'Neizdevās ielādēt sesiju',
          loading: false
        }))
      }
    }


    getInitialSession()


    const { data: { subscription } } = supabase.auth.onAuthStateChange((_event, session) => {
      setState(prev => ({
        ...prev,
        user: session?.user ?? null,
        loading: false,
        error: null
      }))
    })


    return () => {
      try {
        subscription.unsubscribe()
      } catch {
        // ignore
      }
    }
  }, [supabase])


  const signIn = async (email: string, password: string, captchaToken?: string) => {
    try {
      setState(prev => ({ ...prev, loading: true, error: null }))


      const { error } = await supabase.auth.signInWithPassword({
        email,
        password,
        options: {
        captchaToken
      }
      })


      if (error) {
        setState(prev => ({ ...prev, error: error.message, loading: false }))
        return { error: error.message }
      }


      setState(prev => ({ ...prev, loading: false, error: null }))
      return { error: null }
    } catch {
      const errorMessage = 'Neizdevās pieteikties'
      setState(prev => ({ ...prev, error: errorMessage, loading: false }))
      return { error: errorMessage }
    }
  }


  const signUp = async (email: string, password: string, captchaToken?: string, personType?: 'private' | 'company') => {
    try {
      setState(prev => ({ ...prev, loading: true, error: null }))


      const { error } = await supabase.auth.signUp({
        email,
        password,
        options: {
          emailRedirectTo: `${window.location.origin}/auth/callback`,
          captchaToken,
          data: {
            personType: personType || 'private'
          }
        }
      })


      if (error) {
        setState(prev => ({ ...prev, error: error.message, loading: false }))
        return { error: error.message }
      }


      setState(prev => ({ ...prev, loading: false, error: null }))
      return { error: null }
    } catch {
      const errorMessage = 'Neizdevās reģistrēties'
      setState(prev => ({ ...prev, error: errorMessage, loading: false }))
      return { error: errorMessage }
    }
  }


  const signInWithGoogle = async () => {
    try {
      // Neuzturam loading=true ilgi, jo SDK var veikt tūlītēju redirect
      setState(prev => ({ ...prev, error: null }))


      const { error } = await supabase.auth.signInWithOAuth({
        provider: 'google',
        options: {
          redirectTo: `${window.location.origin}/auth/callback`
        }
      })


      if (error) {
        setState(prev => ({ ...prev, error: error.message }))
        return { error: error.message }
      }


      return { error: null }
    } catch {
      const errorMessage = 'Neizdevās pieteikties ar Google'
      setState(prev => ({ ...prev, error: errorMessage }))
      return { error: errorMessage }
    }
  }


  const signInWithFacebook = async () => {
    try {
      setState(prev => ({ ...prev, error: null }))


      const { error } = await supabase.auth.signInWithOAuth({
        provider: 'facebook',
        options: {
          redirectTo: `${window.location.origin}/auth/callback`
        }
      })


      if (error) {
        setState(prev => ({ ...prev, error: error.message }))
        return { error: error.message }
      }


      return { error: null }
    } catch {
      const errorMessage = 'Neizdevās pieteikties ar Facebook'
      setState(prev => ({ ...prev, error: errorMessage }))
      return { error: errorMessage }
    }
  }


  const signOut = async () => {
    try {
      setState(prev => ({ ...prev, loading: true }))
      await supabase.auth.signOut()
      setState(prev => ({ ...prev, user: null, loading: false, error: null }))
    } catch {
      setState(prev => ({ ...prev, error: 'Neizdevās iziet', loading: false }))
    }
  }


  const resetPassword = async (email: string) => {
    try {
      const { error } = await supabase.auth.resetPasswordForEmail(email, {
        redirectTo: `${window.location.origin}/auth/reset-password`
      })


      if (error) {
        return { error: error.message }
      }


      return { error: null }
    } catch {
      return { error: 'Neizdevās nosūtīt paroles atjaunošanas e-pastu' }
    }
  }


  return (
    <AuthContext.Provider
      value={{
        ...state,
        signIn,
        signUp,
        signOut,
        resetPassword,
        signInWithGoogle,
        signInWithFacebook
      }}
    >
      {children}
    </AuthContext.Provider>
  )
}


export function useAuth() {
  const context = useContext(AuthContext)
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider')
  }
  return context
} / AuthTypes: import { User as SupabaseUser } from '@supabase/supabase-js'


export type User = SupabaseUser


export interface UserProfile {
  id: string
  email: string
  role: 'admin' | 'user'
  created_at: string
  updated_at: string
}


export interface AuthState {
  user: User | null
  loading: boolean
  error: string | null
}


export interface LoginCredentials {
  email: string
  password: string
  captchaToken?: string
}


export interface RegisterCredentials {
  email: string
  password: string
  confirmPassword: string
  captchaToken?: string
  personType?: 'private' | 'company'
}


export interface AuthResponse {
  user: User | null
  error: string | null
} / ProfileCreateRoute: import { NextResponse } from 'next/server'
import { createClient } from '../../../../../lib/supabase/server'
import { checkRateLimit } from '../../../../../lib/rateLimit'


/**
 * API route profila izveidei/atjaunināšanai pēc reģistrācijas.
 * Nepieciešams autentificēts lietotājs (Supabase sesijas cookies).
 * Biežākais 401 iemesls: fetch bez credentials: 'include' vai nepareizi setots servera Supabase klients.
 */
export async function POST(req: Request) {
  const ip =
    req.headers.get('x-forwarded-for')?.split(',')[0]?.trim() ||
    req.headers.get('x-real-ip') ||
    'unknown'


  // 1) Rate limit aizsardzība
  if (!checkRateLimit(ip)) {
    return NextResponse.json(
      { error: 'Pārāk daudz pieprasījumu. Lūdzu, mēģini vēlāk.' },
      { status: 429 }
    )
  }


  // 2) Parse body
  let personType: 'private' | 'company' | undefined
  try {
    const body = await req.json()
    personType = body?.personType
  } catch {
    return NextResponse.json({ error: 'Nederīgs pieprasījums' }, { status: 400 })
  }


  if (personType !== 'private' && personType !== 'company') {
    return NextResponse.json({ error: 'Nederīgs profila tips' }, { status: 400 })
  }


  // 3) Supabase servera klients ar cookies sinhronizāciju
  let supabase
  try {
    supabase = await createClient()
  } catch (e) {
    // Env vai init kļūda
    return NextResponse.json({ error: 'Servera konfigurācijas kļūda' }, { status: 500 })
  }


  // 4) Pārbaudām sesiju (auth cookies jābūt klāt)
  const {
    data: { user },
    error: sessionError,
  } = await supabase.auth.getUser()


  if (sessionError) {
    // Diagnostikai atstājam servera konsolē
    console.error('getUser() error:', sessionError)
  }
  if (!user) {
    // BIEŽĀKAIS GADĪJUMS: fetch no klienta bez credentials: "include" vai cits domēns/subdomēns
    return NextResponse.json({ error: 'Nav lietotāja (401). Pieslēdzies un sūti pieprasījumu ar credentials: include.' }, { status: 401 })
  }


  // 5) Update profila tipu
  const { error: updateError } = await supabase
    .from('profiles')
    .update({ person_type: personType, updated_at: new Date().toISOString() })
    .eq('id', user.id)


  if (updateError) {
    console.error('profiles update error:', updateError)
    return NextResponse.json({ error: updateError.message }, { status: 500 })
  }


  // 6) Veiksmīga atbilde
  return NextResponse.json({ success: true })
} / SupabaseServer: import { createServerClient } from '@supabase/ssr'
import { cookies, headers } from 'next/headers'


export async function createClient() {
  const cookieStore = await cookies()
  const hdrs = await headers()


  const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
  const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY


  if (!supabaseUrl || !supabaseAnonKey) {
    console.error('Supabase env nav konfigurēti: NEXT_PUBLIC_SUPABASE_URL vai NEXT_PUBLIC_SUPABASE_ANON_KEY nav iestatīti.')
    throw new Error('Supabase environment variables are missing')
  }


  return createServerClient(supabaseUrl, supabaseAnonKey, {
    cookies: {
      getAll() {
        return cookieStore.getAll()
      },
      setAll(cookiesToSet) {
        try {
          cookiesToSet.forEach(({ name, value, options }) => {
            cookieStore.set(name, value, options)
          })
        } catch (err) {
          console.error('Failed to set cookies via createServerClient:', cookiesToSet, err)
        }
      },
    },
    
    global: {
      headers: {
        'x-forwarded-host': hdrs.get('x-forwarded-host') ?? '',
        'x-forwarded-proto': hdrs.get('x-forwarded-proto') ?? '',
        'x-real-ip': hdrs.get('x-real-ip') ?? '',
      },
    },
  })
}